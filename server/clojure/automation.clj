'(
  [:h1 "Over Automation"]
    [:p "Programmers are a lazy bunch and with no compensating influence, we tend to want to automate each and every thing."]
    [:p "However this can often end up costing more time than it saves"]
    [:p "I have found that often we can make things easier for us and for the user if, instead of going fully automated, maybe we only automate 95% of the task that our program must accomplish tell the user to figure out what to do for the last 5%"]
  [:h2 "Tesla and hoses"]
    [:p "Elon Musk was talking about the automation of various parts of the assembly line for the Tesla Model 3 cars"]
    [:p "He relates a challenge they had to overcome: the car arrives from the previous step of the line and the current step was to connect two hoses.  The technology to automate this was very sophisticated.  It included state of the art computer vision techniques to find the two hose ends that needed to be connected.  The task was very difficult because the hoses could dangle in different ways when it arrived from the last step."]
    [:p "The actually proved too difficult to tackle ... for a machine"]
    [:p "Once the dicision was made to not automate that step, the problem was instantly solved."]
    [:p "Training a human to accomplish this task is as simple as taking a human of average intelligence and telling them \"You see those two hoses, when the car gets to you, you take those hoses and connect them together\""]
    [:p "If the hoses aren't dangling exactly the same way from one car to the next, the human doen't even notice that this and connects the hoses.  A problem that required the pinnacle of machine learning and computer vision techniques is trivial for the human."]
    [:p "So this is the idea : some tasks can be very difficult to describe completely to the computer whereas a simple textual instruction to the user solves the problem in a more complete way."]
  [:h2 "What does it change"]
    [:p "Here is an overview of how automation can hurt"]
    [:p "It can prevent us from saving the situation if some steps fail.  Consider a script that installs to /usr/local/bin and fails because the user doesn't have write access to that location.  Rather than automating a solution by trying to guess a different path, most install scripts forego automation and let the human provide a path with --prefix."]
    [:p "I learned this one as a TA at Polytechnique.  I would grade assignments by cloning the student's repos, looking in a folder like /tp/tp3 and grading the solution.  I would do this for all the students that were part of my group."]
    [:p "I would look at the page that contained my list of team numbers and for each of these team n, I would clone https://githost.gi.polymtl.ca/inf1995/$n, cd into the directory of the current assignment, run make with output redirected to a file, copy a grading form (a txt file) and fill in certain things."]
    [:p "Naturally I made a tool to automate all this.  Most of it was very helpful but where I learned my lesson was with automating the first part without leaving any way to do something else if it fails."]
    [:p "My initial tool would do a curl to the course website and parse the HTML to obtain the list of team numbers that were assigned to me.  When the teacher changed his website presentation, my tool no longer worked."]
    [:p "My mistake was not providing a way of providing the team numbers myself."]
    [:p "Indeed, for a human, it is a trivial task to open up the website, copy-paste the HTML table into an empty text file and do a little bit of vim work to process it into a file with a team number on each line and give that to my program."]
    [:p "Since this tool was going to be used by other TAs, I had to make it robust enough and I thought the best way to make the first part robust was to not do it at all.  I decided that my tool would work by looking at a file with a repo URL on each line.  The user would be told to provide this file"]
)
